{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector\n",
    "\n",
    "# TODO: Fill in code where you see TODO\n",
    "\n",
    "class OrderDB:\n",
    "    \"\"\"Application for querying an order database\"\"\"\n",
    "    \n",
    "    def connect(self):\n",
    "        \"\"\"Makes a connection to the database and returns connection to caller\"\"\"\n",
    "        try:\n",
    "            print(\"Connecting to database.\")\n",
    "            # TODO: Fill in your connection information\n",
    "            self.cnx = mysql.connector.connect(user='your userid', password='yourpassword', host='cosc304.ok.ubc.ca', database='db_youruserid')\n",
    "            return self.cnx\n",
    "        except mysql.connector.Error as err:  \n",
    "            print(err)       \n",
    "            \n",
    "    def init(self):\n",
    "        \"\"\"Creates and initializes the database\"\"\"\n",
    "        fileName = \"order.ddl\"\n",
    "\n",
    "        try:\n",
    "            cursor = self.cnx.cursor()\n",
    "            with open(fileName, \"r\") as infile:\n",
    "                st = infile.read()\n",
    "                commands = st.split(\";\")\n",
    "                for line in commands:                   \n",
    "                    # print(line.strip(\"\\n\"))\n",
    "                    line = line.strip()\n",
    "                    if line == \"\":  # Skip blank lines\n",
    "                        continue \n",
    "                        \n",
    "                    cursor.execute(line)\n",
    "            \n",
    "            cursor.close()\n",
    "            self.cnx.commit()            \n",
    "        except mysql.connector.Error as err:  \n",
    "            print(err)\n",
    "               \n",
    "    def close(self):\n",
    "        try:\n",
    "            print(\"Closing database connection.\")\n",
    "            self.cnx.close()\n",
    "        except mysql.connector.Error as err:  \n",
    "            print(err)   \n",
    "            \n",
    "    def listAllCustomers(self):\n",
    "        \"\"\" Returns a String with all the customers in the order database.  \n",
    "            Format:\n",
    "                CustomerId, CustomerName\n",
    "                00000, A. Anderson \n",
    "\n",
    "            Return:\n",
    "                String containing customers\"\"\"\n",
    "        \n",
    "        print(\"Executing list all customers.\")\n",
    "        \n",
    "        output = \"CustomerId, CustomerName\"\n",
    "                \n",
    "        cursor = self.cnx.cursor()\n",
    "        # TODO: Execute query and build output string                \n",
    "        cursor.close()\n",
    "        return output        \n",
    "\n",
    "    def listCustomerOrders(self, customerId):\n",
    "        \"\"\" Returns a String with all the orders for a given customer id.\n",
    "     \n",
    "            Note: May need to use getDate(). You should not retrieve all values as Strings.\n",
    "\n",
    "            Format:\n",
    "                OrderId, OrderDate, CustomerId, EmployeeId, Total\n",
    "                01001, 2002-11-08, 00001, E0000, 1610.59\n",
    "                \n",
    "            Returns:\n",
    "                String containing orders\n",
    "        \"\"\"\n",
    "        \n",
    "        # TODO: Similar to listAllCustomers(), execute query and store results in a string and return the string\n",
    "        \n",
    "        return \"\"   \n",
    "    \n",
    "    def listLineItemsForOrder(self, orderId):\n",
    "        \"\"\"Returns a cursor with all line items for a given order id.\"\"\"\n",
    "        \n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None\n",
    "    \n",
    "    def computeOrderTotal(self, orderId):\n",
    "        \"\"\"Returns a cursor with a row containing the computed order total from the lineitems (named as orderTotal) for a given order id.\n",
    "             Note: Do NOT just return the Orders.Total value.\"\"\"\n",
    "     \n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None\n",
    "    \n",
    "    def addCustomer(self, customerId, customerName):\n",
    "        \"\"\"Inserts a customer into the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return\n",
    "        \n",
    "    def deleteCustomer(self, customerId):\n",
    "        \"\"\"Deletes a customer from the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return   \n",
    "    \n",
    "    def updateCustomer(self, customerId, customerName):\n",
    "        \"\"\"Updates a customer in the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return  \n",
    "        \n",
    "    def newOrder(self, orderId, customerId, orderDate, employeeId):\n",
    "        \"\"\"Inserts an order into the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return     \n",
    "        \n",
    "    def newLineItem(self, orderId, proudctId, quantity, price):\n",
    "        \"\"\"Inserts a lineitem into the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return\n",
    "        \n",
    "    def updateOrderTotal(self, orderId, total):\n",
    "        \"\"\"Updates an order total in the database\"\"\"\n",
    "        \n",
    "        # TODO: Execute statement. Make sure to commit\n",
    "        return  \n",
    "\n",
    "    def query1(self):\n",
    "        \"\"\"Returns the list of products that have not been in any order. Hint: Left join can be used instead of a subquery.\"\"\"\n",
    "        \n",
    "        print(\"\\nExecuting query #1.\")\n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None\n",
    "\n",
    "    def query2(self):\n",
    "        \"\"\"Returns the order ids and total amount where the order total does not equal the sum of quantity*price for all ordered products in the order.\"\"\"\n",
    "        \n",
    "        print(\"\\nExecuting query #2.\")\n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None   \n",
    "\n",
    "    def query3(self):\n",
    "        \"\"\"Return for each customer their id, name and average total order amount for orders starting on January 1, 2015 (inclusive). Only show customers that have placed at least 2 orders.\n",
    "            Format:\n",
    "                CustomerId, CustomerName, avgTotal\n",
    "                00001, B. Brown, 489.952000\n",
    "        \"\"\"\n",
    "        \n",
    "        print(\"\\nExecuting query #3.\")\n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None  \n",
    "    \n",
    "    def query4(self):\n",
    "        \"\"\" Return the employees who have had at least 2 distinct orders where some product on the order had quantity >= 5.\n",
    "            Format:\n",
    "                EmployeeId, EmployeeName, orderCount                \n",
    "        \"\"\"\n",
    "        \n",
    "        print(\"\\nExecuting query #4.\")\n",
    "        # TODO: Execute the query and return a cursor\n",
    "        return None\n",
    "    \n",
    "    # Do NOT change anything below here\n",
    "    def resultSetToString(self, cursor, maxrows):\n",
    "        output = \"\"\n",
    "        cols = cursor.column_names\n",
    "        output += \"Total columns: \"+str(len(cols))+\"\\n\"\n",
    "        output += cols[0]\n",
    "        for i in range(1,len(cols)):\n",
    "            output += \", \"+cols[i]\n",
    "        for row in cursor:\n",
    "            output += \"\\n\"+str(row[0])\n",
    "            for i in range(1,len(cols)):\n",
    "                output += \", \"+str(row[i])\n",
    "        output += \"\\nTotal results: \"+str(cursor.rowcount)\n",
    "        return output\n",
    "                \n",
    "# Main execution for testing\n",
    "orderDB = OrderDB()\n",
    "orderDB.connect()\n",
    "orderDB.init()\n",
    "\n",
    "print(orderDB.listAllCustomers())\n",
    "print(orderDB.listCustomerOrders(\"00001\"))\n",
    "orderDB.listLineItemsForOrder(\"01000\")\n",
    "orderDB.computeOrderTotal(\"01000\")\n",
    "orderDB.addCustomer(\"11111\", \"Fred Smith\")\n",
    "orderDB.updateCustomer(\"11111\", \"Freddy Smithers\")\n",
    "orderDB.newOrder(\"22222\", \"11111\", \"2015-10-31\", \"E0001\")\n",
    "orderDB.newLineItem(\"22222\", \"P0005\", 5, \"3.10\")\n",
    "orderDB.newLineItem(\"22222\", \"P0007\", 5, \"2.25\")\n",
    "orderDB.newLineItem(\"22222\", \"P0008\", 5, \"2.50\")\n",
    "orderDB.deleteCustomer(\"11111\")\n",
    "orderDB.deleteCustomer(\"00001\")\n",
    "\n",
    "# Queries\n",
    "# Re-initialize all data\n",
    "orderDB.init()\n",
    "print(orderDB.resultSetToString(orderDB.query1(), 100))\n",
    "print(orderDB.resultSetToString(orderDB.query2(), 100))\n",
    "print(orderDB.resultSetToString(orderDB.query3(), 100))\n",
    "print(orderDB.resultSetToString(orderDB.query4(), 100))\n",
    "        \n",
    "orderDB.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
